name: Build, Push Docker & Deploy

on:
  workflow_dispatch:
  push:
    branches: [main]

env:
  APP_NAME: "ci-cid-react"
  SSH_PORT: ${{ secrets.SSH_PORT || '22' }}

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-server:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Validate Secrets
        run: |
          if [ -z "${{ secrets.SSH_HOST }}" ]; then
            echo "::error::SSH_HOST secret is missing"
            exit 1
          fi
          if [ -z "${{ secrets.SSH_USER }}" ]; then
            echo "::error::SSH_USER secret is missing"
            exit 1
          fi
          echo "All required secrets are present"

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS || 'github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl' }}

      - name: Network Connectivity Test
        run: |
          echo "Testing connection to ${{ secrets.SSH_HOST }}:${{ env.SSH_PORT }}"
          timeout 5 bash -c "cat < /dev/null > /dev/tcp/${{ secrets.SSH_HOST }}/${{ env.SSH_PORT }}" && \
            echo "Port ${{ env.SSH_PORT }} is open" || \
            { echo "::error::Cannot reach ${{ secrets.SSH_HOST }}:${{ env.SSH_PORT }}"; exit 1; }

      - name: Verify SSH Connection
        timeout-minutes: 2
        run: |
          ssh -v -o ConnectTimeout=30 \
              -o StrictHostKeyChecking=no \
              -o BatchMode=yes \
              -p ${{ env.SSH_PORT }} \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
              "echo 'SSH connection successful' && \
               docker --version || echo 'Docker not installed'"

      - name: Deploy Application
        run: |
          ssh -o StrictHostKeyChecking=no \
              -p ${{ env.SSH_PORT }} \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOT'
          # Create directory if not exists
          mkdir -p ~/app-deployments
          cd ~/app-deployments

          echo "Pulling latest Docker image..."
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest

          echo "Stopping existing container..."
          docker stop ${{ env.APP_NAME }} || true
          docker rm ${{ env.APP_NAME }} || true

          echo "Starting new container..."
          docker run -d \
            --name ${{ env.APP_NAME }} \
            -p 3000:80 \
            --restart unless-stopped \
            -e NODE_ENV=production \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest

          echo "Deployment complete!"
          docker ps -a | grep ${{ env.APP_NAME }}
          EOT

      - name: Verify Deployment
        run: |
          status=$(ssh -o StrictHostKeyChecking=no \
                  -p ${{ env.SSH_PORT }} \
                  ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
                  "docker inspect -f '{{.State.Running}}' ${{ env.APP_NAME }} 2>/dev/null || echo 'not-running'")
          
          if [ "$status" != "true" ]; then
            echo "::error::Container is not running"
            ssh -p ${{ env.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker logs ${{ env.APP_NAME }}"
            exit 1
          else
            echo "Container is running successfully"
          fi